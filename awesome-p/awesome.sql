-- MySQL dump 10.16  Distrib 10.1.19-MariaDB, for Win32 (AMD64)
--
-- Host: 192.168.1.104    Database: 192.168.1.104
-- ------------------------------------------------------
-- Server version	5.5.56-MariaDB

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;

--
-- Table structure for table `blogs`
--

DROP TABLE IF EXISTS `blogs`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `blogs` (
  `id` varchar(50) NOT NULL,
  `user_id` varchar(50) NOT NULL,
  `user_name` varchar(50) NOT NULL,
  `user_image` varchar(500) NOT NULL,
  `name` varchar(50) NOT NULL,
  `summary` varchar(200) NOT NULL,
  `content` mediumtext NOT NULL,
  `created_at` double NOT NULL,
  PRIMARY KEY (`id`),
  KEY `idx_created_at` (`created_at`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `blogs`
--

LOCK TABLES `blogs` WRITE;
/*!40000 ALTER TABLE `blogs` DISABLE KEYS */;
INSERT INTO `blogs` VALUES ('00152422491644207771ae611fd4f47a586d89909052843000','001524218866820200e190be1194e49b2f5b1ecf075d4d0000','h','http://www.gravatar.com/avatar/016504b84cee81b8f879075f5a14d281?d=mm&s=120','centos 7 cannot open website soluction','network','reset the network default size.',1524224916.4397),('0015242316770282feb838630b146ea984848da5911858c000','001524218866820200e190be1194e49b2f5b1ecf075d4d0000','h','http://www.gravatar.com/avatar/016504b84cee81b8f879075f5a14d281?d=mm&s=120','check tcp connection','tcp','netstat -antp',1524231677.02732),('0015242385193403a40e6ce07174f55b0734c1001157e9f000','001524218866820200e190be1194e49b2f5b1ecf075d4d0000','h','http://www.gravatar.com/avatar/016504b84cee81b8f879075f5a14d281?d=mm&s=120','use nginx server_name','nginx','add local IP server_name in hosts file.',1524238519.34055),('001524243696068ef89c9a2582e4c1b81f2604f57e121b5000','001524218866820200e190be1194e49b2f5b1ecf075d4d0000','h','http://www.gravatar.com/avatar/016504b84cee81b8f879075f5a14d281?d=mm&s=120','unlock yum.pid','pid','rm -rf /var/run/yum.pid',1524243696.06762),('001524274864465c16c08267a8047bbaaba47e4d5c7c9ba000','001524218866820200e190be1194e49b2f5b1ecf075d4d0000','h','http://www.gravatar.com/avatar/016504b84cee81b8f879075f5a14d281?d=mm&s=120','check the port in use','port','lsof -i :80',1524274864.46541),('001524279026700cedf4bd1cc9a4e60bfe48f2466b97f28000','001524218866820200e190be1194e49b2f5b1ecf075d4d0000','h','http://www.gravatar.com/avatar/016504b84cee81b8f879075f5a14d281?d=mm&s=120','nginx test','nginx','nginx -t',1524279026.70079),('0015243011262617c1aa348bd4b45419bac87096f37689a000','001524218866820200e190be1194e49b2f5b1ecf075d4d0000','h','http://www.gravatar.com/avatar/016504b84cee81b8f879075f5a14d281?d=mm&s=120','window visit centos ip','centos','centos network mode: bridge',1524301126.26172),('0015243608333260832857dd237472daba890ac49e298b4000','001524218866820200e190be1194e49b2f5b1ecf075d4d0000','h','http://www.gravatar.com/avatar/016504b84cee81b8f879075f5a14d281?d=mm&s=120','configuration file','supervisor','Configuration File\n==================\n\nThe Supervisor configuration file is conventionally named\n:file:`supervisord.conf`.  It is used by both :program:`supervisord`\nand :program:`supervisorctl`.  If either application is started\nwithout the ``-c`` option (the option which is used to tell the\napplication the configuration filename explicitly), the application\nwill look for a file named :file:`supervisord.conf` within the\nfollowing locations, in the specified order.  It will use the first\nfile it finds.\n\n#. :file:`$CWD/supervisord.conf`\n\n#. :file:`$CWD/etc/supervisord.conf`\n\n#. :file:`/etc/supervisord.conf`\n\n#. :file:`/etc/supervisor/supervisord.conf` (since Supervisor 3.3.0)\n\n#. :file:`../etc/supervisord.conf` (Relative to the executable)\n\n#. :file:`../supervisord.conf` (Relative to the executable)\n\n.. note::\n\n  Many versions of Supervisor packaged for Debian and Ubuntu included a patch\n  that added ``/etc/supervisor/supervisord.conf`` to the search paths.  The\n  first PyPI package of Supervisor to include it was Supervisor 3.3.0.\n\nFile Format\n-----------\n\n:file:`supervisord.conf` is a Windows-INI-style (Python ConfigParser)\nfile.  It has sections (each denoted by a ``[header]``) and key / value\npairs within the sections.  The sections and their allowable values\nare described below.\n\nEnvironment Variables\n~~~~~~~~~~~~~~~~~~~~~\n\nEnvironment variables that are present in the environment at the time that\n:program:`supervisord` is started can be used in the configuration file\nusing the Python string expression syntax ``%(ENV_X)s``:\n\n.. code-block:: ini\n\n    [program:example]\n    command=/usr/bin/example --loglevel=%(ENV_LOGLEVEL)s\n\nIn the example above, the expression ``%(ENV_LOGLEVEL)s`` would be expanded\nto the value of the environment variable ``LOGLEVEL``.\n\n.. note::\n\n    In Supervisor 3.2 and later, ``%(ENV_X)s`` expressions are supported in\n    all options.  In prior versions, some options support them, but most\n    do not.  See the documentation for each option below.\n\n\n``[unix_http_server]`` Section Settings\n---------------------------------------\n\nThe :file:`supervisord.conf` file contains a section named\n``[unix_http_server]`` under which configuration parameters for an\nHTTP server that listens on a UNIX domain socket should be inserted.\nIf the configuration file has no ``[unix_http_server]`` section, a\nUNIX domain socket HTTP server will not be started.  The allowable\nconfiguration values are as follows.\n\n``[unix_http_server]`` Section Values\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n``file``\n\n  A path to a UNIX domain socket (e.g. :file:`/tmp/supervisord.sock`)\n  on which supervisor will listen for HTTP/XML-RPC requests.\n  :program:`supervisorctl` uses XML-RPC to communicate with\n  :program:`supervisord` over this port.  This option can include the\n  value ``%(here)s``, which expands to the directory in which the\n  :program:`supervisord` configuration file was found.\n\n  *Default*:  None.\n\n  *Required*:  No.\n\n  *Introduced*: 3.0\n\n``chmod``\n\n  Change the UNIX permission mode bits of the UNIX domain socket to\n  this value at startup.\n\n  *Default*: ``0700``\n\n  *Required*:  No.\n\n  *Introduced*: 3.0\n\n``chown``\n\n  Change the user and group of the socket file to this value.  May be\n  a UNIX username (e.g. ``chrism``) or a UNIX username and group\n  separated by a colon (e.g. ``chrism:wheel``).\n\n  *Default*:  Use the username and group of the user who starts supervisord.\n\n  *Required*:  No.\n\n  *Introduced*: 3.0\n\n``username``\n\n  The username required for authentication to this HTTP server.\n\n  *Default*:  No username required.\n\n  *Required*:  No.\n\n  *Introduced*: 3.0\n\n``password``\n\n  The password required for authentication to this HTTP server.  This\n  can be a cleartext password, or can be specified as a SHA-1 hash if\n  prefixed by the string ``{SHA}``.  For example,\n  ``{SHA}82ab876d1387bfafe46cc1c8a2ef074eae50cb1d`` is the SHA-stored\n  version of the password \"thepassword\".\n\n  Note that hashed password must be in hex format.\n\n  *Default*:  No password required.\n\n  *Required*:  No.\n\n  *Introduced*: 3.0\n\n``[unix_http_server]`` Section Example\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. code-block:: ini\n\n   [unix_http_server]\n   file = /tmp/supervisor.sock\n   chmod = 0777\n   chown= nobody:nogroup\n   username = user\n   password = 123\n\n``[inet_http_server]`` Section Settings\n---------------------------------------\n\nThe :file:`supervisord.conf` file contains a section named\n``[inet_http_server]`` under which configuration parameters for an\nHTTP server that listens on a TCP (internet) socket should be\ninserted.  If the configuration file has no ``[inet_http_server]``\nsection, an inet HTTP server will not be started.  The allowable\nconfiguration values are as follows.\n\n``[inet_http_server]`` Section Values\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n``port``\n\n  A TCP host:port value or (e.g. ``127.0.0.1:9001``) on which\n  supervisor will listen for HTTP/XML-RPC requests.\n  :program:`supervisorctl` will use XML-RPC to communicate with\n  :program:`supervisord` over this port.  To listen on all interfaces\n  in the machine, use ``:9001`` or ``*:9001``.\n\n  *Default*:  No default.\n\n  *Required*:  Yes.\n\n  *Introduced*: 3.0\n\n``username``\n\n  The username required for authentication to this HTTP server.\n\n  *Default*:  No username required.\n\n  *Required*:  No.\n\n  *Introduced*: 3.0\n\n``password``\n\n  The password required for authentication to this HTTP server.  This\n  can be a cleartext password, or can be specified as a SHA-1 hash if\n  prefixed by the string ``{SHA}``.  For example,\n  ``{SHA}82ab876d1387bfafe46cc1c8a2ef074eae50cb1d`` is the SHA-stored\n  version of the password \"thepassword\".\n\n  Note that hashed password must be in hex format.\n\n  *Default*:  No password required.\n\n  *Required*:  No.\n\n  *Introduced*: 3.0\n\n``[inet_http_server]`` Section Example\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. code-block:: ini\n\n   [inet_http_server]\n   port = 127.0.0.1:9001\n   username = user\n   password = 123\n\n``[supervisord]`` Section Settings\n----------------------------------\n\nThe :file:`supervisord.conf` file contains a section named\n``[supervisord]`` in which global settings related to the\n:program:`supervisord` process should be inserted.  These are as\nfollows.\n\n``[supervisord]`` Section Values\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n``logfile``\n\n  The path to the activity log of the supervisord process.  This\n  option can include the value ``%(here)s``, which expands to the\n  directory in which the supervisord configuration file was found.\n\n  *Default*:  :file:`$CWD/supervisord.log`\n\n  *Required*:  No.\n\n  *Introduced*: 3.0\n\n``logfile_maxbytes``\n\n  The maximum number of bytes that may be consumed by the activity log\n  file before it is rotated (suffix multipliers like \"KB\", \"MB\", and\n  \"GB\" can be used in the value).  Set this value to 0 to indicate an\n  unlimited log size.\n\n  *Default*:  50MB\n\n  *Required*:  No.\n\n  *Introduced*: 3.0\n\n``logfile_backups``\n\n  The number of backups to keep around resulting from activity log\n  file rotation.  If set to 0, no backups will be kept.\n\n  *Default*:  10\n\n  *Required*:  No.\n\n  *Introduced*: 3.0\n\n``loglevel``\n\n  The logging level, dictating what is written to the supervisord\n  activity log.  One of ``critical``, ``error``, ``warn``, ``info``,\n  ``debug``, ``trace``, or ``blather``.  Note that at log level\n  ``debug``, the supervisord log file will record the stderr/stdout\n  output of its child processes and extended info info about process\n  state changes, which is useful for debugging a process which isn\'t\n  starting properly.  See also: :ref:`activity_log_levels`.\n\n  *Default*:  info\n\n  *Required*:  No.\n\n  *Introduced*: 3.0\n\n``pidfile``\n\n  The location in which supervisord keeps its pid file.  This option\n  can include the value ``%(here)s``, which expands to the directory\n  in which the supervisord configuration file was found.\n\n  *Default*:  :file:`$CWD/supervisord.pid`\n\n  *Required*:  No.\n\n  *Introduced*: 3.0\n\n``umask``\n\n  The :term:`umask` of the supervisord process.\n\n  *Default*:  ``022``\n\n  *Required*:  No.\n\n  *Introduced*: 3.0\n\n``nodaemon``\n\n  If true, supervisord will start in the foreground instead of\n  daemonizing.\n\n  *Default*:  false\n\n  *Required*:  No.\n\n  *Introduced*: 3.0\n\n``minfds``\n\n  The minimum number of file descriptors that must be available before\n  supervisord will start successfully.  A call to setrlimit will be made\n  to attempt to raise the soft and hard limits of the supervisord process to\n  satisfy ``minfds``.  The hard limit may only be raised if supervisord\n  is run as root.  supervisord uses file descriptors liberally, and will\n  enter a failure mode when one cannot be obtained from the OS, so it\'s\n  useful to be able to specify a minimum value to ensure it doesn\'t run out\n  of them during execution.  These limits will be inherited by the managed\n  subprocesses.  This option is particularly useful on Solaris,\n  which has a low per-process fd limit by default.\n\n  *Default*:  1024\n\n  *Required*:  No.\n\n  *Introduced*: 3.0\n\n``minprocs``\n\n  The minimum number of process descriptors that must be available\n  before supervisord will start successfully.  A call to setrlimit will be\n  made to attempt to raise the soft and hard limits of the supervisord process\n  to satisfy ``minprocs``.  The hard limit may only be raised if supervisord\n  is run as root.  supervisord will enter a failure mode when the OS runs out\n  of process descriptors, so it\'s useful to ensure that enough process\n  descriptors are available upon :program:`supervisord` startup.\n\n  *Default*:  200\n\n  *Required*:  No.\n\n  *Introduced*: 3.0\n\n``nocleanup``\n\n  Prevent supervisord from clearing any existing ``AUTO``\n  child log files at startup time.  Useful for debugging.\n\n  *Default*:  false\n\n  *Required*:  No.\n\n  *Introduced*: 3.0\n\n``childlogdir``\n\n  The directory used for ``AUTO`` child log files.  This option can\n  include the value ``%(here)s``, which expands to the directory in\n  which the :program:`supervisord` configuration file was found.\n\n  *Default*: value of Python\'s :func:`tempfile.get_tempdir`\n\n  *Required*:  No.\n\n  *Introduced*: 3.0\n\n``user``\n\n  Instruct :program:`supervisord` to switch users to this UNIX user\n  account before doing any meaningful processing.  The user can only\n  be switched if :program:`supervisord` is started as the root user.\n  If :program:`supervisord` can\'t switch users, it will still continue\n  but will write a log message at the ``critical`` level saying that it\n  can\'t drop privileges.\n\n  *Default*: do not switch users\n\n  *Required*:  No.\n\n  *Introduced*: 3.0\n\n``directory``\n\n  When :program:`supervisord` daemonizes, switch to this directory.\n  This option can include the value ``%(here)s``, which expands to the\n  directory in which the :program:`supervisord` configuration file was\n  found.\n\n  *Default*: do not cd\n\n  *Required*:  No.\n\n  *Introduced*: 3.0\n\n``strip_ansi``\n\n  Strip all ANSI escape sequences from child log files.\n\n  *Default*: false\n\n  *Required*:  No.\n\n  *Introduced*: 3.0\n\n``environment``\n\n  A list of key/value pairs in the form ``KEY=\"val\",KEY2=\"val2\"`` that\n  will be placed in the :program:`supervisord` process\' environment\n  (and as a result in all of its child process\' environments).  This\n  option can include the value ``%(here)s``, which expands to the\n  directory in which the supervisord configuration file was found.\n  Values containing non-alphanumeric characters should be quoted\n  (e.g. ``KEY=\"val:123\",KEY2=\"val,456\"``).  Otherwise, quoting the\n  values is optional but recommended.  To escape percent characters,\n  simply use two. (e.g. ``URI=\"/first%%20name\"``) **Note** that\n  subprocesses will inherit the environment variables of the shell\n  used to start :program:`supervisord` except for the ones overridden\n  here and within the program\'s ``environment`` option.  See\n  :ref:`subprocess_environment`.\n\n  *Default*: no values\n\n  *Required*:  No.\n\n  *Introduced*: 3.0\n\n``identifier``\n\n  The identifier string for this supervisor process, used by the RPC\n  interface.\n\n  *Default*: supervisor\n\n  *Required*:  No.\n\n  *Introduced*: 3.0\n\n``[supervisord]`` Section Example\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. code-block:: ini\n\n   [supervisord]\n   logfile = /tmp/supervisord.log\n   logfile_maxbytes = 50MB\n   logfile_backups=10\n   loglevel = info\n   pidfile = /tmp/supervisord.pid\n   nodaemon = false\n   minfds = 1024\n   minprocs = 200\n   umask = 022\n   user = chrism\n   identifier = supervisor\n   directory = /tmp\n   nocleanup = true\n   childlogdir = /tmp\n   strip_ansi = false\n   environment = KEY1=\"value1\",KEY2=\"value2\"\n\n``[supervisorctl]`` Section Settings\n------------------------------------\n\n  The configuration file may contain settings for the\n  :program:`supervisorctl` interactive shell program.  These options\n  are listed below.\n\n``[supervisorctl]`` Section Values\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n``serverurl``\n\n  The URL that should be used to access the supervisord server,\n  e.g. ``http://localhost:9001``.  For UNIX domain sockets, use\n  ``unix:///absolute/path/to/file.sock``.\n\n  *Default*: ``http://localhost:9001``\n\n  *Required*:  No.\n\n  *Introduced*: 3.0\n\n``username``\n\n  The username to pass to the supervisord server for use in\n  authentication.  This should be same as ``username`` from the\n  supervisord server configuration for the port or UNIX domain socket\n  you\'re attempting to access.\n\n  *Default*: No username\n\n  *Required*:  No.\n\n  *Introduced*: 3.0\n\n``password``\n\n  The password to pass to the supervisord server for use in\n  authentication. This should be the cleartext version of ``password``\n  from the supervisord server configuration for the port or UNIX\n  domain socket you\'re attempting to access.  This value cannot be\n  passed as a SHA hash.  Unlike other passwords specified in this\n  file, it must be provided in cleartext.\n\n  *Default*: No password\n\n  *Required*:  No.\n\n  *Introduced*: 3.0\n\n``prompt``\n\n  String used as supervisorctl prompt.\n\n  *Default*: ``supervisor``\n\n  *Required*:  No.\n\n  *Introduced*: 3.0\n\n``history_file``\n\n  A path to use as the ``readline`` persistent history file.  If you\n  enable this feature by choosing a path, your supervisorctl commands\n  will be kept in the file, and you can use readline (e.g. arrow-up)\n  to invoke commands you performed in your last supervisorctl session.\n\n  *Default*: No file\n\n  *Required*:  No.\n\n  *Introduced*: 3.0a5\n\n``[supervisorctl]`` Section Example\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. code-block:: ini\n\n   [supervisorctl]\n   serverurl = unix:///tmp/supervisor.sock\n   username = chris\n   password = 123\n   prompt = mysupervisor\n\n.. _programx_section:\n\n``[program:x]`` Section Settings\n--------------------------------\n\nThe configuration file must contain one or more ``program`` sections\nin order for supervisord to know which programs it should start and\ncontrol.  The header value is composite value.  It is the word\n\"program\", followed directly by a colon, then the program name.  A\nheader value of ``[program:foo]`` describes a program with the name of\n\"foo\".  The name is used within client applications that control the\nprocesses that are created as a result of this configuration.  It is\nan error to create a ``program`` section that does not have a name.\nThe name must not include a colon character or a bracket character.\nThe value of the name is used as the value for the\n``%(program_name)s`` string expression expansion within other values\nwhere specified.\n\n.. note::\n\n   A ``[program:x]`` section actually represents a \"homogeneous\n   process group\" to supervisor (as of 3.0).  The members of the group\n   are defined by the combination of the ``numprocs`` and\n   ``process_name`` parameters in the configuration.  By default, if\n   numprocs and process_name are left unchanged from their defaults,\n   the group represented by ``[program:x]`` will be named ``x`` and\n   will have a single process named ``x`` in it.  This provides a\n   modicum of backwards compatibility with older supervisor releases,\n   which did not treat program sections as homogeneous process group\n   definitions.\n\n   But for instance, if you have a ``[program:foo]`` section with a\n   ``numprocs`` of 3 and a ``process_name`` expression of\n   ``%(program_name)s_%(process_num)02d``, the \"foo\" group will\n   contain three processes, named ``foo_00``, ``foo_01``, and\n   ``foo_02``.  This makes it possible to start a number of very\n   similar processes using a single ``[program:x]`` section.  All\n   logfile names, all environment strings, and the command of programs\n   can also contain similar Python string expressions, to pass\n   slightly different parameters to each process.\n\n``[program:x]`` Section Values\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n``command``\n\n  The command that will be run when this program is started.  The\n  command can be either absolute (e.g. ``/path/to/programname``) or\n  relative (e.g. ``programname``).  If it is relative, the\n  supervisord\'s environment ``$PATH`` will be searched for the\n  executable.  Programs can accept arguments, e.g. ``/path/to/program\n  foo bar``.  The command line can use double quotes to group\n  arguments with spaces in them to pass to the program,\n  e.g. ``/path/to/program/name -p \"foo bar\"``.  Note that the value of\n  ``command`` may include Python string expressions,\n  e.g. ``/path/to/programname --port=80%(process_num)02d`` might\n  expand to ``/path/to/programname --port=8000`` at runtime.  String\n  expressions are evaluated against a dictionary containing the keys\n  ``group_name``, ``host_node_name``, ``process_num``, ``program_name``,\n  ``here`` (the directory of the supervisord config file), and all\n  supervisord\'s environment variables prefixed with ``ENV_``.  Controlled\n  programs should themselves not be daemons, as supervisord assumes it is\n  responsible for daemonizing its subprocesses (see\n  :ref:`nondaemonizing_of_subprocesses`).\n\n  .. note::\n\n    The command will be truncated if it looks like a config file comment,\n    e.g. ``command=bash -c \'foo ; bar\'`` will be truncated to\n    ``command=bash -c \'foo``.  Quoting will not prevent this behavior,\n    since the configuration file reader does not parse the command like\n    a shell would.\n\n  *Default*: No default.\n\n  *Required*:  Yes.\n\n  *Introduced*: 3.0\n\n``process_name``\n\n  A Python string expression that is used to compose the supervisor\n  process name for this process.  You usually don\'t need to worry\n  about setting this unless you change ``numprocs``.  The string\n  expression is evaluated against a dictionary that includes\n  ``group_name``, ``host_node_name``, ``process_num``, ``program_name``,\n  and ``here`` (the directory of the supervisord config file).\n\n  *Default*: ``%(program_name)s``\n\n  *Required*:  No.\n\n  *Introduced*: 3.0\n\n``numprocs``\n\n  Supervisor will start as many instances of this program as named by\n  numprocs.  Note that if numprocs > 1, the ``process_name``\n  expression must include ``%(process_num)s`` (or any other\n  valid Python string expression that includes ``process_num``) within\n  it.\n\n  *Default*: 1\n\n  *Required*:  No.\n\n  *Introduced*: 3.0\n\n``numprocs_start``\n\n  An integer offset that is used to compute the number at which\n  ``numprocs`` starts.\n\n  *Default*: 0\n\n  *Required*:  No.\n\n  *Introduced*: 3.0\n\n``priority``\n\n  The relative priority of the program in the start and shutdown\n  ordering.  Lower priorities indicate programs that start first and\n  shut down last at startup and when aggregate commands are used in\n  various clients (e.g. \"start all\"/\"stop all\").  Higher priorities\n  indicate programs that start last and shut down first.\n\n  *Default*: 999\n\n  *Required*:  No.\n\n  *Introduced*: 3.0\n\n``autostart``\n\n  If true, this program will start automatically when supervisord is\n  started.\n\n  *Default*: true\n\n  *Required*:  No.\n\n  *Introduced*: 3.0\n\n``startsecs``\n\n  The total number of seconds which the program needs to stay running\n  after a startup to consider the start successful (moving the process\n  from the ``STARTING`` state to the ``RUNNING`` state).  Set to ``0``\n  to indicate that the program needn\'t stay running for any particular\n  amount of time.\n\n  .. note::\n\n      Even if a process exits with an \"expected\" exit code (see\n      ``exitcodes``), the start will still be considered a failure\n      if the process exits quicker than ``startsecs``.\n\n  *Default*: 1\n\n  *Required*:  No.\n\n  *Introduced*: 3.0\n\n``startretries``\n\n  The number of serial failure attempts that :program:`supervisord`\n  will allow when attempting to start the program before giving up and\n  putting the process into an ``FATAL`` state.  See\n  :ref:`process_states` for explanation of the ``FATAL`` state.\n\n  *Default*: 3\n\n  *Required*:  No.\n\n  *Introduced*: 3.0\n\n``autorestart``\n\n  Specifies if :program:`supervisord` should automatically restart a\n  process if it exits when it is in the ``RUNNING`` state.  May be\n  one of ``false``, ``unexpected``, or ``true``.  If ``false``, the\n  process will not be autorestarted.  If ``unexpected``, the process\n  will be restarted when the program exits with an exit code that is\n  not one of the exit codes associated with this process\' configuration\n  (see ``exitcodes``).  If ``true``, the process will be unconditionally\n  restarted when it exits, without regard to its exit code.\n\n  .. note::\n\n      ``autorestart`` controls whether :program:`supervisord` will\n      autorestart a program if it exits after it has successfully started\n      up (the process is in the ``RUNNING`` state).\n\n      :program:`supervisord` has a different restart mechanism for when the\n      process is starting up (the process is in the ``STARTING`` state).\n      Retries during process startup are controlled by ``startsecs``\n      and ``startretries``.\n\n  *Default*: unexpected\n\n  *Required*:  No.\n\n  *Introduced*: 3.0\n\n``exitcodes``\n\n  The list of \"expected\" exit codes for this program used with ``autorestart``.\n  If the ``autorestart`` parameter is set to ``unexpected``, and the process\n  exits in any other way than as a result of a supervisor stop\n  request, :program:`supervisord` will restart the process if it exits\n  with an exit code that is not defined in this list.\n\n  *Default*: 0,2\n\n  *Required*:  No.\n\n  *Introduced*: 3.0\n\n``stopsignal``\n\n  The signal used to kill the program when a stop is requested.  This\n  can be any of TERM, HUP, INT, QUIT, KILL, USR1, or USR2.\n\n  *Default*: TERM\n\n  *Required*:  No.\n\n  *Introduced*: 3.0\n\n``stopwaitsecs``\n\n  The number of seconds to wait for the OS to return a SIGCHLD to\n  :program:`supervisord` after the program has been sent a stopsignal.\n  If this number of seconds elapses before :program:`supervisord`\n  receives a SIGCHLD from the process, :program:`supervisord` will\n  attempt to kill it with a final SIGKILL.\n\n  *Default*: 10\n\n  *Required*:  No.\n\n  *Introduced*: 3.0\n\n``stopasgroup``\n\n  If true, the flag causes supervisor to send the stop signal to the\n  whole process group and implies ``killasgroup`` is true.  This is useful\n  for programs, such as Flask in debug mode, that do not propagate\n  stop signals to their children, leaving them orphaned.\n\n  *Default*: false\n\n  *Required*:  No.\n\n  *Introduced*: 3.0b1\n\n``killasgroup``\n\n  If true, when resorting to send SIGKILL to the program to terminate\n  it send it to its whole process group instead, taking care of its\n  children as well, useful e.g with Python programs using\n  :mod:`multiprocessing`.\n\n  *Default*: false\n\n  *Required*:  No.\n\n  *Introduced*: 3.0a11\n\n``user``\n\n  Instruct :program:`supervisord` to use this UNIX user account as the\n  account which runs the program.  The user can only be switched if\n  :program:`supervisord` is run as the root user.  If :program:`supervisord`\n  can\'t switch to the specified user, the program will not be started.\n\n  .. note::\n\n      The user will be changed using ``setuid`` only.  This does not start\n      a login shell and does not change environment variables like\n      ``USER`` or ``HOME``.  See :ref:`subprocess_environment` for details.\n\n  *Default*: Do not switch users\n\n  *Required*:  No.\n\n  *Introduced*: 3.0\n\n``redirect_stderr``\n\n  If true, cause the process\' stderr output to be sent back to\n  :program:`supervisord` on its stdout file descriptor (in UNIX shell\n  terms, this is the equivalent of executing ``/the/program 2>&1``).\n\n  .. note::\n\n     Do not set ``redirect_stderr=true`` in an ``[eventlistener:x]`` section.\n     Eventlisteners use ``stdout`` and ``stdin`` to communicate with\n     ``supervisord``.  If ``stderr`` is redirected, output from\n     ``stderr`` will interfere with the eventlistener protocol.\n\n  *Default*: false\n\n  *Required*:  No.\n\n  *Introduced*: 3.0, replaces 2.0\'s ``log_stdout`` and ``log_stderr``\n\n``stdout_logfile``\n\n  Put process stdout output in this file (and if redirect_stderr is\n  true, also place stderr output in this file).  If ``stdout_logfile``\n  is unset or set to ``AUTO``, supervisor will automatically choose a\n  file location.  If this is set to ``NONE``, supervisord will create\n  no log file.  ``AUTO`` log files and their backups will be deleted\n  when :program:`supervisord` restarts.  The ``stdout_logfile`` value\n  can contain Python string expressions that will evaluated against a\n  dictionary that contains the keys ``group_name``, ``host_node_name``,\n  ``process_num``, ``program_name``, and ``here`` (the directory of the\n  supervisord config file).\n\n  .. note::\n\n     It is not possible for two processes to share a single log file\n     (``stdout_logfile``) when rotation (``stdout_logfile_maxbytes``)\n     is enabled.  This will result in the file being corrupted.\n\n  *Default*: ``AUTO``\n\n  *Required*:  No.\n\n  *Introduced*: 3.0, replaces 2.0\'s ``logfile``\n\n``stdout_logfile_maxbytes``\n\n  The maximum number of bytes that may be consumed by\n  ``stdout_logfile`` before it is rotated (suffix multipliers like\n  \"KB\", \"MB\", and \"GB\" can be used in the value).  Set this value to 0\n  to indicate an unlimited log size.\n\n  *Default*: 50MB\n\n  *Required*:  No.\n\n  *Introduced*: 3.0, replaces 2.0\'s ``logfile_maxbytes``\n\n``stdout_logfile_backups``\n\n  The number of ``stdout_logfile`` backups to keep around resulting\n  from process stdout log file rotation.  If set to 0, no backups\n  will be kept.\n\n  *Default*: 10\n\n  *Required*:  No.\n\n  *Introduced*: 3.0, replaces 2.0\'s ``logfile_backups``\n\n``stdout_capture_maxbytes``\n\n  Max number of bytes written to capture FIFO when process is in\n  \"stdout capture mode\" (see :ref:`capture_mode`).  Should be an\n  integer (suffix multipliers like \"KB\", \"MB\" and \"GB\" can used in the\n  value).  If this value is 0, process capture mode will be off.\n\n  *Default*: 0\n\n  *Required*:  No.\n\n  *Introduced*: 3.0\n\n``stdout_events_enabled``\n\n  If true, PROCESS_LOG_STDOUT events will be emitted when the process\n  writes to its stdout file descriptor.  The events will only be\n  emitted if the file descriptor is not in capture mode at the time\n  the data is received (see :ref:`capture_mode`).\n\n  *Default*: 0\n\n  *Required*:  No.\n\n  *Introduced*: 3.0a7\n\n``stderr_logfile``\n\n  Put process stderr output in this file unless ``redirect_stderr`` is\n  true.  Accepts the same value types as ``stdout_logfile`` and may\n  contain the same Python string expressions.\n\n  .. note::\n\n     It is not possible for two processes to share a single log file\n     (``stderr_logfile``) when rotation (``stderr_logfile_maxbytes``)\n     is enabled.  This will result in the file being corrupted.\n\n  *Default*: ``AUTO``\n\n  *Required*:  No.\n\n  *Introduced*: 3.0\n\n``stderr_logfile_maxbytes``\n\n  The maximum number of bytes before logfile rotation for\n  ``stderr_logfile``.  Accepts the same value types as\n  ``stdout_logfile_maxbytes``.\n\n  *Default*: 50MB\n\n  *Required*:  No.\n\n  *Introduced*: 3.0\n\n``stderr_logfile_backups``\n\n  The number of backups to keep around resulting from process stderr\n  log file rotation.  If set to 0, no backups will be kept.\n\n  *Default*: 10\n\n  *Required*:  No.\n\n  *Introduced*: 3.0\n\n``stderr_capture_maxbytes``\n\n  Max number of bytes written to capture FIFO when process is in\n  \"stderr capture mode\" (see :ref:`capture_mode`).  Should be an\n  integer (suffix multipliers like \"KB\", \"MB\" and \"GB\" can used in the\n  value).  If this value is 0, process capture mode will be off.\n\n  *Default*: 0\n\n  *Required*:  No.\n\n  *Introduced*: 3.0\n\n``stderr_events_enabled``\n\n  If true, PROCESS_LOG_STDERR events will be emitted when the process\n  writes to its stderr file descriptor.  The events will only be\n  emitted if the file descriptor is not in capture mode at the time\n  the data is received (see :ref:`capture_mode`).\n\n  *Default*: false\n\n  *Required*:  No.\n\n  *Introduced*: 3.0a7\n\n``environment``\n\n  A list of key/value pairs in the form ``KEY=\"val\",KEY2=\"val2\"`` that\n  will be placed in the child process\' environment.  The environment\n  string may contain Python string expressions that will be evaluated\n  against a dictionary containing ``group_name``, ``host_node_name``,\n  ``process_num``, ``program_name``, and ``here`` (the directory of the\n  supervisord config file).  Values containing non-alphanumeric characters\n  should be quoted (e.g. ``KEY=\"val:123\",KEY2=\"val,456\"``).  Otherwise,\n  quoting the values is optional but recommended.  **Note** that the\n  subprocess will inherit the environment variables of the shell used to\n  start \"supervisord\" except for the ones overridden here.  See\n  :ref:`subprocess_environment`.\n\n  *Default*: No extra environment\n\n  *Required*:  No.\n\n  *Introduced*: 3.0\n\n``directory``\n\n  A file path representing a directory to which :program:`supervisord`\n  should temporarily chdir before exec\'ing the child.\n\n  *Default*: No chdir (inherit supervisor\'s)\n\n  *Required*:  No.\n\n  *Introduced*: 3.0\n\n``umask``\n\n  An octal number (e.g. 002, 022) representing the umask of the\n  process.\n\n  *Default*: No special umask (inherit supervisor\'s)\n\n  *Required*:  No.\n\n  *Introduced*: 3.0\n\n``serverurl``\n\n  The URL passed in the environment to the subprocess process as\n  ``SUPERVISOR_SERVER_URL`` (see :mod:`supervisor.childutils`) to\n  allow the subprocess to easily communicate with the internal HTTP\n  server.  If provided, it should have the same syntax and structure\n  as the ``[supervisorctl]`` section option of the same name.  If this\n  is set to AUTO, or is unset, supervisor will automatically construct\n  a server URL, giving preference to a server that listens on UNIX\n  domain sockets over one that listens on an internet socket.\n\n  *Default*: AUTO\n\n  *Required*:  No.\n\n  *Introduced*: 3.0\n\n``[program:x]`` Section Example\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. code-block:: ini\n\n   [program:cat]\n   command=/bin/cat\n   process_name=%(program_name)s\n   numprocs=1\n   directory=/tmp\n   umask=022\n   priority=999\n   autostart=true\n   autorestart=unexpected\n   startsecs=10\n   startretries=3\n   exitcodes=0,2\n   stopsignal=TERM\n   stopwaitsecs=10\n   stopasgroup=false\n   killasgroup=false\n   user=chrism\n   redirect_stderr=false\n   stdout_logfile=/a/path\n   stdout_logfile_maxbytes=1MB\n   stdout_logfile_backups=10\n   stdout_capture_maxbytes=1MB\n   stdout_events_enabled=false\n   stderr_logfile=/a/path\n   stderr_logfile_maxbytes=1MB\n   stderr_logfile_backups=10\n   stderr_capture_maxbytes=1MB\n   stderr_events_enabled=false\n   environment=A=\"1\",B=\"2\"\n   serverurl=AUTO\n\n``[include]`` Section Settings\n------------------------------\n\nThe :file:`supervisord.conf` file may contain a section named\n``[include]``.  If the configuration file contains an ``[include]``\nsection, it must contain a single key named \"files\".  The values in\nthis key specify other configuration files to be included within the\nconfiguration.\n\n.. note::\n\n    The ``[include]`` section is processed only by ``supervisord``.  It is\n    ignored by ``supervisorctl``.\n\n\n``[include]`` Section Values\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n``files``\n\n  A space-separated sequence of file globs.  Each file glob may be\n  absolute or relative.  If the file glob is relative, it is\n  considered relative to the location of the configuration file which\n  includes it.  A \"glob\" is a file pattern which matches a specified\n  pattern according to the rules used by the Unix shell. No tilde\n  expansion is done, but ``*``, ``?``, and character ranges expressed\n  with ``[]`` will be correctly matched.  The string expression is\n  evaluated against a dictionary that includes ``host_node_name``\n  and ``here`` (the directory of the supervisord config file).  Recursive\n  includes from included files are not supported.\n\n  *Default*: No default (required)\n\n  *Required*:  Yes.\n\n  *Introduced*: 3.0\n\n  *Changed*: 3.3.0.  Added support for the ``host_node_name`` expansion.\n\n``[include]`` Section Example\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. code-block:: ini\n\n   [include]\n   files = /an/absolute/filename.conf /an/absolute/*.conf foo.conf config??.conf\n\n``[group:x]`` Section Settings\n------------------------------\n\nIt is often useful to group \"homogeneous\" process groups (aka\n\"programs\") together into a \"heterogeneous\" process group so they can\nbe controlled as a unit from Supervisor\'s various controller\ninterfaces.\n\nTo place programs into a group so you can treat them as a unit, define\na ``[group:x]`` section in your configuration file.  The group header\nvalue is a composite.  It is the word \"group\", followed directly by a\ncolon, then the group name.  A header value of ``[group:foo]``\ndescribes a group with the name of \"foo\".  The name is used within\nclient applications that control the processes that are created as a\nresult of this configuration.  It is an error to create a ``group``\nsection that does not have a name.  The name must not include a colon\ncharacter or a bracket character.\n\nFor a ``[group:x]``, there must be one or more ``[program:x]``\nsections elsewhere in your configuration file, and the group must\nrefer to them by name in the ``programs`` value.\n\nIf \"homogeneous\" process groups (represented by program sections) are\nplaced into a \"heterogeneous\" group via ``[group:x]`` section\'s\n``programs`` line, the homogeneous groups that are implied by the\nprogram section will not exist at runtime in supervisor.  Instead, all\nprocesses belonging to each of the homogeneous groups will be placed\ninto the heterogeneous group.  For example, given the following group\nconfiguration:\n\n.. code-block:: ini\n\n   [group:foo]\n   programs=bar,baz\n   priority=999\n\nGiven the above, at supervisord startup, the ``bar`` and ``baz``\nhomogeneous groups will not exist, and the processes that would have\nbeen under them will now be moved into the ``foo`` group.\n\n``[group:x]`` Section Values\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n``programs``\n\n  A comma-separated list of program names.  The programs which are\n  listed become members of the group.\n\n  *Default*: No default (required)\n\n  *Required*:  Yes.\n\n  *Introduced*: 3.0\n\n``priority``\n\n  A priority number analogous to a ``[program:x]`` priority value\n  assigned to the group.\n\n  *Default*: 999\n\n  *Required*:  No.\n\n  *Introduced*: 3.0\n\n``[group:x]`` Section Example\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. code-block:: ini\n\n   [group:foo]\n   programs=bar,baz\n   priority=999\n\n\n``[fcgi-program:x]`` Section Settings\n-------------------------------------\n\nSupervisor can manage groups of `FastCGI <http://www.fastcgi.com>`_\nprocesses that all listen on the same socket.  Until now, deployment\nflexibility for FastCGI was limited.  To get full process management,\nyou could use mod_fastcgi under Apache but then you were stuck with\nApache\'s inefficient concurrency model of one process or thread per\nconnection.  In addition to requiring more CPU and memory resources,\nthe process/thread per connection model can be quickly saturated by a\nslow resource, preventing other resources from being served.  In order\nto take advantage of newer event-driven web servers such as lighttpd\nor nginx which don\'t include a built-in process manager, you had to\nuse scripts like cgi-fcgi or spawn-fcgi.  These can be used in\nconjunction with a process manager such as supervisord or daemontools\nbut require each FastCGI child process to bind to its own socket.\nThe disadvantages of this are: unnecessarily complicated web server\nconfiguration, ungraceful restarts, and reduced fault tolerance.  With\nfewer sockets to configure, web server configurations are much smaller\nif groups of FastCGI processes can share sockets.  Shared sockets\nallow for graceful restarts because the socket remains bound by the\nparent process while any of the child processes are being restarted.\nFinally, shared sockets are more fault tolerant because if a given\nprocess fails, other processes can continue to serve inbound\nconnections.\n\nWith integrated FastCGI spawning support, Supervisor gives you the\nbest of both worlds.  You get full-featured process management with\ngroups of FastCGI processes sharing sockets without being tied to a\nparticular web server.  It\'s a clean separation of concerns, allowing\nthe web server and the process manager to each do what they do best.\n\n.. note::\n\n   The socket manager in Supervisor was originally developed to support\n   FastCGI processes but it is not limited to FastCGI.  Other protocols may\n   be used as well with no special configuration.  Any program that can\n   access an open socket from a file descriptor (e.g. with\n   `socket.fromfd <http://docs.python.org/library/socket.html#socket.fromfd>`_\n   in Python) can use the socket manager.  Supervisor will automatically\n   create the socket, bind, and listen before forking the first child in a\n   group.  The socket will be passed to each child on file descriptor\n   number ``0`` (zero).  When the last child in the group exits,\n   Supervisor will close the socket.\n\nAll the options available to ``[program:x]`` sections are\nalso respected by ``fcgi-program`` sections.\n\n``[fcgi-program:x]`` Section Values\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n``[fcgi-program:x]`` sections have a single key which ``[program:x]``\nsections do not have.\n\n``socket``\n\n  The FastCGI socket for this program, either TCP or UNIX domain\n  socket. For TCP sockets, use this format: ``tcp://localhost:9002``.\n  For UNIX domain sockets, use ``unix:///absolute/path/to/file.sock``.\n  String expressions are evaluated against a dictionary containing the\n  keys \"program_name\" and \"here\" (the directory of the supervisord\n  config file).\n\n  *Default*: No default.\n\n  *Required*:  Yes.\n\n  *Introduced*: 3.0\n\n``socket_owner``\n\n  For UNIX domain sockets, this parameter can be used to specify the user\n  and group for the FastCGI socket. May be a UNIX username (e.g. chrism)\n  or a UNIX username and group separated by a colon (e.g. chrism:wheel).\n\n  *Default*: Uses the user and group set for the fcgi-program\n\n  *Required*:  No.\n\n  *Introduced*: 3.0\n\n``socket_mode``\n\n  For UNIX domain sockets, this parameter can be used to specify the\n  permission mode.\n\n  *Default*: 0700\n\n  *Required*:  No.\n\n  *Introduced*: 3.0\n\nConsult :ref:`programx_section` for other allowable keys, delta the\nabove constraints and additions.\n\n``[fcgi-program:x]`` Section Example\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. code-block:: ini\n\n   [fcgi-program:fcgiprogramname]\n   command=/usr/bin/example.fcgi\n   socket=unix:///var/run/supervisor/%(program_name)s.sock\n   socket_owner=chrism\n   socket_mode=0700\n   process_name=%(program_name)s_%(process_num)02d\n   numprocs=5\n   directory=/tmp\n   umask=022\n   priority=999\n   autostart=true\n   autorestart=unexpected\n   startsecs=1\n   startretries=3\n   exitcodes=0,2\n   stopsignal=QUIT\n   stopasgroup=false\n   killasgroup=false\n   stopwaitsecs=10\n   user=chrism\n   redirect_stderr=true\n   stdout_logfile=/a/path\n   stdout_logfile_maxbytes=1MB\n   stdout_logfile_backups=10\n   stdout_events_enabled=false\n   stderr_logfile=/a/path\n   stderr_logfile_maxbytes=1MB\n   stderr_logfile_backups=10\n   stderr_events_enabled=false\n   environment=A=\"1\",B=\"2\"\n   serverurl=AUTO\n\n``[eventlistener:x]`` Section Settings\n--------------------------------------\n\nSupervisor allows specialized homogeneous process groups (\"event\nlistener pools\") to be defined within the configuration file.  These\npools contain processes that are meant to receive and respond to event\nnotifications from supervisor\'s event system.  See :ref:`events` for\nan explanation of how events work and how to implement programs that\ncan be declared as event listeners.\n\nNote that all the options available to ``[program:x]`` sections are\nrespected by eventlistener sections *except* for ``stdout_capture_maxbytes``.\nEventlisteners cannot emit process communication events on ``stdout``,\nbut can emit on ``stderr`` (see :ref:`capture_mode`).\n\n``[eventlistener:x]`` Section Values\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n``[eventlistener:x]`` sections have a few keys which ``[program:x]``\nsections do not have.\n\n``buffer_size``\n\n  The event listener pool\'s event queue buffer size.  When a listener\n  pool\'s event buffer is overflowed (as can happen when an event\n  listener pool cannot keep up with all of the events sent to it), the\n  oldest event in the buffer is discarded.\n\n``events``\n\n  A comma-separated list of event type names that this listener is\n  \"interested\" in receiving notifications for (see\n  :ref:`event_types` for a list of valid event type names).\n\n``result_handler``\n\n  A `pkg_resources entry point string\n  <http://peak.telecommunity.com/DevCenter/PkgResources>`_ that\n  resolves to a Python callable.  The default value is\n  ``supervisor.dispatchers:default_handler``.  Specifying an alternate\n  result handler is a very uncommon thing to need to do, and as a\n  result, how to create one is not documented.\n\nConsult :ref:`programx_section` for other allowable keys, delta the\nabove constraints and additions.\n\n``[eventlistener:x]`` Section Example\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. code-block:: ini\n\n   [eventlistener:theeventlistenername]\n   command=/bin/eventlistener\n   process_name=%(program_name)s_%(process_num)02d\n   numprocs=5\n   events=PROCESS_STATE\n   buffer_size=10\n   directory=/tmp\n   umask=022\n   priority=-1\n   autostart=true\n   autorestart=unexpected\n   startsecs=1\n   startretries=3\n   exitcodes=0,2\n   stopsignal=QUIT\n   stopwaitsecs=10\n   stopasgroup=false\n   killasgroup=false\n   user=chrism\n   redirect_stderr=false\n   stdout_logfile=/a/path\n   stdout_logfile_maxbytes=1MB\n   stdout_logfile_backups=10\n   stdout_events_enabled=false\n   stderr_logfile=/a/path\n   stderr_logfile_maxbytes=1MB\n   stderr_logfile_backups=10\n   stderr_events_enabled=false\n   environment=A=\"1\",B=\"2\"\n   serverurl=AUTO\n\n``[rpcinterface:x]`` Section Settings\n-------------------------------------\n\nAdding ``rpcinterface:x`` settings in the configuration file is only\nuseful for people who wish to extend supervisor with additional custom\nbehavior.\n\nIn the sample config file, there is a section which is named\n``[rpcinterface:supervisor]``.  By default it looks like the\nfollowing.\n\n.. code-block:: ini\n\n   [rpcinterface:supervisor]\n   supervisor.rpcinterface_factory = supervisor.rpcinterface:make_main_rpcinterface\n\nThe ``[rpcinterface:supervisor]`` section *must* remain in the\nconfiguration for the standard setup of supervisor to work properly.\nIf you don\'t want supervisor to do anything it doesn\'t already do out\nof the box, this is all you need to know about this type of section.\n\nHowever, if you wish to add rpc interface namespaces in order to\ncustomize supervisor, you may add additional ``[rpcinterface:foo]``\nsections, where \"foo\" represents the namespace of the interface (from\nthe web root), and the value named by\n``supervisor.rpcinterface_factory`` is a factory callable which should\nhave a function signature that accepts a single positional argument\n``supervisord`` and as many keyword arguments as required to perform\nconfiguration.  Any extra key/value pairs defined within the\n``[rpcinterface:x]`` section will be passed as keyword arguments to\nthe factory.\n\nHere\'s an example of a factory function, created in the\n``__init__.py`` file of the Python package ``my.package``.\n\n.. code-block:: python\n\n   from my.package.rpcinterface import AnotherRPCInterface\n\n   def make_another_rpcinterface(supervisord, **config):\n       retries = int(config.get(\'retries\', 0))\n       another_rpc_interface = AnotherRPCInterface(supervisord, retries)\n       return another_rpc_interface\n\nAnd a section in the config file meant to configure it.\n\n.. code-block:: ini\n\n   [rpcinterface:another]\n   supervisor.rpcinterface_factory = my.package:make_another_rpcinterface\n   retries = 1\n\n``[rpcinterface:x]`` Section Values\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n``supervisor.rpcinterface_factory``\n\n  ``pkg_resources`` \"entry point\" dotted name to your RPC interface\'s\n  factory function.\n\n  *Default*: N/A\n\n  *Required*:  No.\n\n  *Introduced*: 3.0\n\n``[rpcinterface:x]`` Section Example\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. code-block:: ini\n\n   [rpcinterface:another]\n   supervisor.rpcinterface_factory = my.package:make_another_rpcinterface\n   retries = 1',1524360833.32535),('0015243631886275a3d388c41894cbabdc44ecbe7aff44a000','001524218866820200e190be1194e49b2f5b1ecf075d4d0000','h','http://www.gravatar.com/avatar/016504b84cee81b8f879075f5a14d281?d=mm&s=120','Supervisor瀹夎涓庨厤缃?,'supervisor','Supervisor锛坔ttp://supervisord.org/锛夋槸鐢≒ython寮€鍙戠殑涓€涓猚lient/server鏈嶅姟锛屾槸Linux/Unix绯荤粺涓嬬殑涓€涓繘绋嬬鐞嗗伐鍏凤紝涓嶆敮鎸乄indows绯荤粺銆傚畠鍙互寰堟柟渚跨殑鐩戝惉銆佸惎鍔ㄣ€佸仠姝€侀噸鍚竴涓垨澶氫釜杩涚▼銆傜敤Supervisor绠＄悊鐨勮繘绋嬶紝褰撲竴涓繘绋嬫剰澶栬鏉€姝伙紝supervisort鐩戝惉鍒拌繘绋嬫鍚庯紝浼氳嚜鍔ㄥ皢瀹冮噸鏂版媺璧凤紝寰堟柟渚跨殑鍋氬埌杩涚▼鑷姩鎭㈠鐨勫姛鑳斤紝涓嶅啀闇€瑕佽嚜宸卞啓shell鑴氭湰鏉ユ帶鍒躲€俓n鍥犱负Supervisor鏄疨ython寮€鍙戠殑锛屽畨瑁呭墠鍏堟鏌ヤ竴涓嬬郴缁熷惁瀹夎浜哖ython2.4浠ヤ笂鐗堟湰銆備笅闈互CentOS7锛孭ython2.7鐗堟湰鐜涓嬶紝浠嬬粛Supervisor鐨勫畨瑁呬笌閰嶇疆姝ヨ仛锛歕n1銆佸畨瑁匬ython鍖呯鐞嗗伐鍏凤紙easy_install锛塡neasy_install鏄痵etuptools鍖呴噷甯︾殑涓€涓懡浠わ紝浣跨敤easy_install瀹為檯涓婃槸鍦ㄨ皟鐢╯etuptools鏉ュ畬鎴愬畨瑁呮ā鍧楃殑宸ヤ綔,鎵€浠ュ畨瑁卻etuptools鍗冲彲銆俓n1\n2\nwget --no-check-certificate https://bootstrap.pypa.io/ez_setup.py -O - | sudo python\n1\n2銆佸畨瑁卻upervisor\neasy_install supervisor\n1\nsupervisor瀹夎瀹屾垚鍚庝細鐢熸垚涓変釜鎵ц绋嬪簭锛歴upervisortd銆乻upervisorctl銆乪cho_supervisord_conf锛屽垎鍒槸supervisor鐨勫畧鎶よ繘绋嬫湇鍔★紙鐢ㄤ簬鎺ユ敹杩涚▼绠＄悊鍛戒护锛夈€佸鎴风锛堢敤浜庡拰瀹堟姢杩涚▼閫氫俊锛屽彂閫佺鐞嗚繘绋嬬殑鎸囦护锛夈€佺敓鎴愬垵濮嬮厤缃枃浠剁▼搴忋€俓n3銆侀厤缃甛n杩愯supervisord鏈嶅姟鐨勬椂鍊欙紝闇€瑕佹寚瀹歴upervisor閰嶇疆鏂囦欢锛屽鏋滄病鏈夋樉绀烘寚瀹氾紝榛樿鍦ㄤ互涓嬬洰褰曟煡鎵撅細\n$CWD/supervisord.conf\n$CWD/etc/supervisord.conf\n/etc/supervisord.conf\n/etc/supervisor/supervisord.conf (since Supervisor 3.3.0)\n../etc/supervisord.conf (Relative to the executable)\n../supervisord.conf (Relative to the executable)\n1\n2\n3\n4\n5\n6\n$CWD琛ㄧず杩愯supervisord绋嬪簭鐨勭洰褰曘€俓n鍙互閫氳繃杩愯echo_supervisord_conf绋嬪簭鐢熸垚supervisor鐨勫垵濮嬪寲閰嶇疆鏂囦欢锛屽涓嬫墍绀猴細\nmkdir /etc/supervisor\necho_supervisord_conf > /etc/supervisor/supervisord.conf\n1\n2\n4銆侀厤缃枃浠跺弬鏁拌鏄嶾nsupervisor鐨勯厤缃弬鏁拌緝澶氾紝涓嬮潰浠嬬粛涓€涓嬪父鐢ㄧ殑鍙傛暟閰嶇疆锛岃缁嗙殑閰嶇疆鍙婅鏄庯紝璇峰弬鑰冨畼鏂规枃妗ｄ粙缁嶃€?\n娉細鍒嗗彿锛?锛夊紑澶寸殑閰嶇疆琛ㄧず娉ㄩ噴\n[unix_http_server]\nfile=/tmp/supervisor.sock   ;UNIX socket 鏂囦欢锛宻upervisorctl 浼氫娇鐢╘n;chmod=0700                 ;socket鏂囦欢鐨刴ode锛岄粯璁ゆ槸0700\n;chown=nobody:nogroup       ;socket鏂囦欢鐨刼wner锛屾牸寮忥細uid:gid\n\n;[inet_http_server]         ;HTTP鏈嶅姟鍣紝鎻愪緵web绠＄悊鐣岄潰\n;port=127.0.0.1:9001        ;Web绠＄悊鍚庡彴杩愯鐨処P鍜岀鍙ｏ紝濡傛灉寮€鏀惧埌鍏綉锛岄渶瑕佹敞鎰忓畨鍏ㄦ€n;username=user              ;鐧诲綍绠＄悊鍚庡彴鐨勭敤鎴峰悕\n;password=123               ;鐧诲綍绠＄悊鍚庡彴鐨勫瘑鐮乗n\n[supervisord]\nlogfile=/tmp/supervisord.log ;鏃ュ織鏂囦欢锛岄粯璁ゆ槸 $CWD/supervisord.log\nlogfile_maxbytes=50MB        ;鏃ュ織鏂囦欢澶у皬锛岃秴鍑轰細rotate锛岄粯璁?50MB锛屽鏋滆鎴?锛岃〃绀轰笉闄愬埗澶у皬\nlogfile_backups=10           ;鏃ュ織鏂囦欢淇濈暀澶囦唤鏁伴噺榛樿10锛岃涓?琛ㄧず涓嶅浠絓nloglevel=info                ;鏃ュ織绾у埆锛岄粯璁nfo锛屽叾瀹? debug,warn,trace\npidfile=/tmp/supervisord.pid ;pid 鏂囦欢\nnodaemon=false               ;鏄惁鍦ㄥ墠鍙板惎鍔紝榛樿鏄痜alse锛屽嵆浠?daemon 鐨勬柟寮忓惎鍔╘nminfds=1024                  ;鍙互鎵撳紑鐨勬枃浠舵弿杩扮鐨勬渶灏忓€硷紝榛樿 1024\nminprocs=200                 ;鍙互鎵撳紑鐨勮繘绋嬫暟鐨勬渶灏忓€硷紝榛樿 200\n\n[supervisorctl]\nserverurl=unix:///tmp/supervisor.sock ;閫氳繃UNIX socket杩炴帴supervisord锛岃矾寰勪笌unix_http_server閮ㄥ垎鐨刦ile涓€鑷碶n;serverurl=http://127.0.0.1:9001 ; 閫氳繃HTTP鐨勬柟寮忚繛鎺upervisord\n\n; [program:xx]鏄绠＄悊鐨勮繘绋嬮厤缃弬鏁帮紝xx鏄繘绋嬬殑鍚嶇О\n[program:xx]\ncommand=/opt/apache-tomcat-8.0.35/bin/catalina.sh run  ; 绋嬪簭鍚姩鍛戒护\nautostart=true       ; 鍦╯upervisord鍚姩鐨勬椂鍊欎篃鑷姩鍚姩\nstartsecs=10         ; 鍚姩10绉掑悗娌℃湁寮傚父閫€鍑猴紝灏辫〃绀鸿繘绋嬫甯稿惎鍔ㄤ簡锛岄粯璁や负1绉抃nautorestart=true     ; 绋嬪簭閫€鍑哄悗鑷姩閲嶅惎,鍙€夊€硷細[unexpected,true,false]锛岄粯璁や负unexpected锛岃〃绀鸿繘绋嬫剰澶栨潃姝诲悗鎵嶉噸鍚痋nstartretries=3       ; 鍚姩澶辫触鑷姩閲嶈瘯娆℃暟锛岄粯璁ゆ槸3\nuser=tomcat          ; 鐢ㄥ摢涓敤鎴峰惎鍔ㄨ繘绋嬶紝榛樿鏄痳oot\npriority=999         ; 杩涚▼鍚姩浼樺厛绾э紝榛樿999锛屽€煎皬鐨勪紭鍏堝惎鍔╘nredirect_stderr=true ; 鎶妔tderr閲嶅畾鍚戝埌stdout锛岄粯璁alse\nstdout_logfile_maxbytes=20MB  ; stdout 鏃ュ織鏂囦欢澶у皬锛岄粯璁?0MB\nstdout_logfile_backups = 20   ; stdout 鏃ュ織鏂囦欢澶囦唤鏁帮紝榛樿鏄?0\n; stdout 鏃ュ織鏂囦欢锛岄渶瑕佹敞鎰忓綋鎸囧畾鐩綍涓嶅瓨鍦ㄦ椂鏃犳硶姝ｅ父鍚姩锛屾墍浠ラ渶瑕佹墜鍔ㄥ垱寤虹洰褰曪紙supervisord 浼氳嚜鍔ㄥ垱寤烘棩蹇楁枃浠讹級\nstdout_logfile=/opt/apache-tomcat-8.0.35/logs/catalina.out\nstopasgroup=false     ;榛樿涓篺alse,杩涚▼琚潃姝绘椂锛屾槸鍚﹀悜杩欎釜杩涚▼缁勫彂閫乻top淇″彿锛屽寘鎷瓙杩涚▼\nkillasgroup=false     ;榛樿涓篺alse锛屽悜杩涚▼缁勫彂閫乲ill淇″彿锛屽寘鎷瓙杩涚▼\n\n;鍖呭惈鍏跺畠閰嶇疆鏂囦欢\n[include]\nfiles = relative/directory/*.ini    ;鍙互鎸囧畾涓€涓垨澶氫釜浠?ini缁撴潫鐨勯厤缃枃浠禱n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\ninclude绀轰緥锛歕n[include]\nfiles = /opt/absolute/filename.ini /opt/absolute/*.ini foo.conf config??.ini\n1\n2\n5銆侀厤缃鐞嗚繘绋媆n杩涚▼绠＄悊閰嶇疆鍙傛暟锛屼笉寤鸿鍏ㄩ兘鍐欏湪supervisord.conf鏂囦欢涓紝搴旇姣忎釜杩涚▼鍐欎竴涓厤缃枃浠舵斁鍦╥nclude鎸囧畾鐨勭洰褰曚笅鍖呭惈杩泂upervisord.conf鏂囦欢涓€?\n1> 鍒涘缓/etc/supervisor/config.d鐩綍锛岀敤浜庡瓨鏀捐繘绋嬬鐞嗙殑閰嶇疆鏂囦欢 \n2> 淇敼/etc/supervisor/supervisord.conf涓殑include鍙傛暟锛屽皢/etc/supervisor/conf.d鐩綍娣诲姞鍒癷nclude涓璡n[include]\nfiles = /etc/supervisor/config.d/*.ini\n1\n2\n\n涓嬮潰鏄厤缃甌omcat杩涚▼鐨勪竴涓緥瀛愶細\n[program:tomcat]\ncommand=/opt/apache-tomcat-8.0.35/bin/catalina.sh run\nstdout_logfile=/opt/apache-tomcat-8.0.35/logs/catalina.out\nautostart=true\nautorestart=true\nstartsecs=5\npriority=1\nstopasgroup=true\nkillasgroup=true\n1\n2\n3\n4\n5\n6\n7\n8\n9\n5銆佸惎鍔⊿upervisor鏈嶅姟\nsupervisord -c /etc/supervisor/supervisord.conf\n1\n6銆佹帶鍒惰繘绋媆n6.1 浜や簰缁堢\nsupervisord鍚姩鎴愬姛鍚庯紝鍙互閫氳繃supervisorctl瀹㈡埛绔帶鍒惰繘绋嬶紝鍚姩銆佸仠姝€侀噸鍚€傝繍琛宻upervisorctl鍛戒护锛屼笉鍔犲弬鏁帮紝浼氳繘鍏upervisor瀹㈡埛绔殑浜や簰缁堢锛屽苟浼氬垪鍑哄綋鍓嶆墍绠＄悊鐨勬墍鏈夎繘绋嬨€?\n\n涓婂浘涓殑tomcat灏辨槸鎴戜滑鍦ㄩ厤缃枃浠朵腑[program:tomcat]鎸囧畾鐨勫悕瀛椼€俓n1\n2\n杈撳叆help鍙互鏌ョ湅鍙互鎵ц鐨勫懡浠ゅ垪琛紝濡傛灉鎯崇湅鏌愪釜鍛戒护鐨勪綔鐢紝杩愯help 鍛戒护鍚嶇О锛屽锛歨elp stop\nstop tomcat  // 琛ㄧず鍋滄tomcat杩涚▼\nstop all     // 琛ㄧず鍋滄鎵€鏈夎繘绋媆n// ...\n1\n2\n3\n6.2 bash缁堢\nsupervisorctl status\nsupervisorctl stop tomcat\nsupervisorctl start tomcat\nsupervisorctl restart tomcat\nsupervisorctl reread\nsupervisorctl update\n1\n2\n3\n4\n5\n6\n6.3 Web绠＄悊鐣岄潰\n \n鍑轰簬瀹夊叏鑰冭檻锛岄粯璁ら厤缃槸娌℃湁寮€鍚痺eb绠＄悊鐣岄潰锛岄渶瑕佷慨鏀箂upervisord.conf閰嶇疆鏂囦欢鎵撳紑http璁挎潈闄愶紝灏嗕笅闈㈢殑閰嶇疆锛歕n;[inet_http_server]         ; inet (TCP) server disabled by default\n;port=127.0.0.1:9001        ; (ip_address:port specifier, *:port for all iface)\n;username=user              ; (default is no username (open server))\n;password=123               ; (default is no password (open server))\n1\n2\n3\n4\n淇敼鎴愶細\n[inet_http_server]         ; inet (TCP) server disabled by default\nport=0.0.0.0:9001          ; (ip_address:port specifier, *:port for all iface)\nusername=user              ; (default is no username (open server))\npassword=123               ; (default is no password (open server))\n1\n2\n3\n4\nport锛氱粦瀹氳闂甀P鍜岀鍙ｏ紝杩欓噷鏄粦瀹氱殑鏄湰鍦癐P鍜?001绔彛 \nusername锛氱櫥褰曠鐞嗗悗鍙扮殑鐢ㄦ埛鍚?\npassword锛氱櫥褰曠鐞嗗悗鍙扮殑瀵嗙爜\n7銆佸紑鏈哄惎鍔⊿upervisor鏈嶅姟\n7.1 閰嶇疆systemctl鏈嶅姟\n1> 杩涘叆/lib/systemd/system鐩綍锛屽苟鍒涘缓supervisor.service鏂囦欢\n[Unit]\nDescription=supervisor\nAfter=network.target\n\n[Service]\nType=forking\nExecStart=/usr/bin/supervisord -c /etc/supervisor/supervisord.conf\nExecStop=/usr/bin/supervisorctl $OPTIONS shutdown\nExecReload=/usr/bin/supervisorctl $OPTIONS reload\nKillMode=process\nRestart=on-failure\nRestartSec=42s\n\n[Install]\nWantedBy=multi-user.target\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n2> 璁剧疆寮€鏈哄惎鍔╘nsystemctl enable supervisor.service\nsystemctl daemon-reload\n1\n2\n3銆佷慨鏀规枃浠舵潈闄愪负766\nchmod 766 supervisor.service\n1\n7.2 閰嶇疆service绫诲瀷鏈嶅姟\n#!/bin/bash\n#\n# supervisord   This scripts turns supervisord on\n#\n# Author:       Mike McGrath <mmcgrath@redhat.com> (based off yumupdatesd)\n#\n# chkconfig:    - 95 04\n#\n# description:  supervisor is a process control utility.  It has a web based\n#               xmlrpc interface as well as a few other nifty features.\n# processname:  supervisord\n# config: /etc/supervisor/supervisord.conf\n# pidfile: /var/run/supervisord.pid\n#\n\n# source function library\n. /etc/rc.d/init.d/functions\n\nRETVAL=0\n\nstart() {\n    echo -n $\"Starting supervisord: \"\n    daemon \"supervisord -c /etc/supervisor/supervisord.conf \"\n    RETVAL=$?\n    echo\n    [ $RETVAL -eq 0 ] && touch /var/lock/subsys/supervisord\n}\n\nstop() {\n    echo -n $\"Stopping supervisord: \"\n    killproc supervisord\n    echo\n    [ $RETVAL -eq 0 ] && rm -f /var/lock/subsys/supervisord\n}\n\nrestart() {\n    stop\n    start\n}\n\ncase \"$1\" in\n  start)\n    start\n    ;;\n  stop) \n    stop\n    ;;\n  restart|force-reload|reload)\n    restart\n    ;;\n  condrestart)\n    [ -f /var/lock/subsys/supervisord ] && restart\n    ;;\n  status)\n    status supervisord\n    RETVAL=$?\n    ;;\n  *)\n    echo $\"Usage: $0 {start|stop|status|restart|reload|force-reload|condrestart}\"\n    exit 1\nesac\n\nexit $RETVAL\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n灏嗕笂杩拌剼鏈唴瀹逛繚瀛樺埌/etc/rc.d/init.d/supervisor鏂囦欢涓紝淇敼鏂囦欢鏉冮檺涓?55锛屽苟璁剧疆寮€鏈哄惎鍔╘nchmod 755 /etc/rc.d/init.d/supervisor\nchkconfig supervisor on\n1\n2\n娉ㄦ剰锛氫慨鏀硅剼鏈腑supervisor閰嶇疆鏂囦欢璺緞涓轰綘鐨剆upervisor鐨勯厤缃枃浠惰矾寰?,1524363188.62793),('001524373172156b83037f92de3435ba94eb8949fb9c553000','001524218866820200e190be1194e49b2f5b1ecf075d4d0000','h','http://www.gravatar.com/avatar/016504b84cee81b8f879075f5a14d281?d=mm&s=120','create supervisor.conf','supervisor','echo_supervisord_conf > /etc/supervisord.conf',1524373172.15596),('0015243927031838bc167223c174472954c308eb5356bc8000','001524218866820200e190be1194e49b2f5b1ecf075d4d0000','h','http://www.gravatar.com/avatar/016504b84cee81b8f879075f5a14d281?d=mm&s=120','supervisorctl has run','supervisor','supervisord run before the supervisorctl.',1524392703.18355),('001524411664104d8f4278150c64b879089b0a7294b9e1e000','001524218866820200e190be1194e49b2f5b1ecf075d4d0000','h','http://www.gravatar.com/avatar/016504b84cee81b8f879075f5a14d281?d=mm&s=120','tar collect file','tar','tar -zcPf test.tar.gz /tmp/test[absolute route]\ntar -zcPf test.tar.gz /tmp/test[relative route]',1524411664.10407),('001524418722979d515f9ef83824c3194061140adc2857d000','001524218866820200e190be1194e49b2f5b1ecf075d4d0000','h','http://www.gravatar.com/avatar/016504b84cee81b8f879075f5a14d281?d=mm&s=120','python os module','python','os妯″潡鍖呭惈鏅亶鐨勬搷浣滅郴缁熷姛鑳姐€俓n娉ㄦ剰锛氬嚱鏁板弬鏁皃ath鏄枃浠舵垨鐩綍鐨勮矾寰勶紝filename鏄枃浠剁殑璺緞锛宒irname鏄洰褰曠殑璺緞锛岃矾寰勫彲浠ユ槸鐩稿璺緞锛屼篃鍙粷瀵硅矾寰刓n甯歌鎴栭噸瑕佺殑鍑芥暟涓哄姞绮楀瓧浣揬nos妯″潡锛歕nos.name ----- 杩斿洖褰撳墠鎿嶄綔绯荤粺鍚嶇О(\'posix\', \'nt\', \'os2\', \'mac\', \'ce\', \'riscos\'),windows涓篭'nt\'锛宭inux涓篭'posix\'\n \nos涓畾涔変簡涓€缁勬枃浠躲€佽矾寰勫湪涓嶅悓鎿嶄綔绯荤粺涓殑琛ㄧ幇褰㈠紡鍙傛暟锛屽涓?\nos.sep --杩斿洖璺緞鍚勯儴鍒嗕箣闂寸殑鍒嗛殧绗︼紝linux鏄痋'/\'锛寃indows鏄痋'\\\\\'锛岀敱浜嶾'\\\'鍦╬ython涓細杞箟锛屾墍浠ヨ繑鍥炲€兼槸涓や釜\'\\\'   ==銆€os.path.sep\nos.extsep ----- 杩斿洖鏂囦欢鍚嶅拰鏂囦欢鎵╁睍鍚嶄箣闂寸殑鍒嗛殧绗︼細 \'.\'\nos.pathsep ----- 鐩綍鍒嗛殧绗︼紝\':\'\nos.linesep ----- 鎹㈣鍒嗛殧绗︼紝linux鏄痋'\\n\'锛寃indows鏄痋'\\r\\n\'\n \nos涓湁澶ч噺鏂囦欢銆佽矾寰勬搷浣滅殑鐩稿叧鍑芥暟锛屽锛歕nos.listdir(path) ----- 鍒椾妇鐩綍涓嬬殑鎵€鏈夋枃浠跺拰瀛愮洰褰昞nos.getcwd() ----- 鑾峰彇褰撳墠宸ヤ綔鐩綍璺緞\nos.mkdir(dirname) ----- 鍒涘缓鐩綍锛岀洰褰曞凡瀛樺湪灏嗕笉鑳藉啀鍒涘缓\nos.makedirs(dirname) ----- 閫掑綊寮忕殑鍒涘缓鐩綍锛屼笂绾х洰褰曚笉瀛樺湪锛屽皢浼氬垱寤猴紱鐩綍宸插瓨鍦ㄥ皢涓嶈兘鍐嶅垱寤篭nos.remove(filename) ----- 鍒犻櫎鎸囧畾鐨勬枃浠禱nos.rmdir(dirname) ----- 鍒犻櫎涓€涓┖鐩綍\nos.removedirs(dirname) ----- 閫掑綊鍒犻櫎绌虹洰褰曪紝渚嬪 os.removedirs(\'dir1/dir2/dir3\'),dir1涓嬮櫎浜哾ir2杩樻湁鍏朵粬锛宒ir2涓嬪彧鏈塪ir3锛屽垯鍒犻櫎dir3鍜宒ir2\nos.rename(src, dst) ----- 缁欐枃浠舵垨鐩綍鏀瑰悕\nos.renames(src, dst) ----- 閫掑綊寮忕殑缁欐枃浠舵垨鐩綍鏀瑰悕\nos.access(path, mode) ----- 妫€楠屾潈闄愭ā寮忥紝杩斿洖鍊间负bool鍊笺€俶ode鍙傛暟鍒楄〃[os.F_OK, os.R_OK, os.W_OK, os.X_OK]\nos.F_OK: path鏄惁瀛樺湪锛沷s.R_OK: path鏄惁鍙锛?os.W_OK: path鏄惁鍙啓锛沷s.X_OK: path鏄惁鍙墽琛屻€俓nos.chdir(path) ----- 鏀瑰彉褰撳墠宸ヤ綔鐩綍\nos.walk(path[, topdown=True[, onerror=None[, followlinks=False]]] ) ----- 閬嶅巻璺緞涓嬬殑鐩綍鍜屾枃浠朵互鍙婂瓙鐩綍涓嬬殑鐩綍鍜屾枃浠讹紝涓嶇澶氬皯灞傚浼氶亶鍘嗗埌銆?杩斿洖涓€涓?-鍏冪粍鐨刧enerator锛?dirpath, dirnames, filenames)[鐩綍璺緞锛岀洰褰曞悕鍒楄〃锛屾枃浠跺悕鍒楄〃]\n鍙€夊弬鏁帮細\ntopdown -- 涓篢rue鎴栬€呮病鏈夋寚瀹氾紝鍏堥亶鍘嗙洰褰曞啀閬嶅巻鍏跺瓙鐩綍锛涗负False锛屼竴涓洰褰曠殑3-鍏冪粍姣斿畠鐨勪换浣曞瓙鐩綍鐨?-鍏冪粍鍚庝骇鐢焅nonerror -- 鍙€夛紝鏄竴涓嚱鏁? 瀹冭皟鐢ㄦ椂鏈変竴涓弬鏁? 涓€涓狾SError瀹炰緥銆傛姤鍛婅繖閿欒鍚庯紝缁х画walk,鎴栬€呮姏鍑篹xception缁堟walk銆俓nfollowlinks -- 璁剧疆涓?true锛屽垯閫氳繃杞摼鎺ヨ闂洰褰曘€俓n瀹炰緥瑙佷笅涓€绡? http://www.cnblogs.com/victorwu/p/5840099.html\n \nos涓笌杩涚▼鐩稿叧鐨勬搷浣?\nos.system(cmd) ----- 杩愯涓€涓▼搴忔垨鍛戒护锛屼細绔嬪嵆杩斿洖锛屼笂杩板緢澶氭搷浣滈兘鍙互鐢ㄨ鍑芥暟瀹屾垚\nos.startfile(filename) ----- 鐢ㄤ笌鏂囦欢鍏宠仈鐨勭▼搴忚繍琛岋紝鍏宠仈绋嬪簭鎵撳紑鍚庯紝绔嬪嵆杩斿洖\nos.execl(path) ----- 杩愯涓€涓▼搴忔潵鏇夸唬褰撳墠杩涚▼锛屼細闃诲寮忚繍琛孿nos._exit(n) ----- 閫€鍑虹▼搴廫n \nos.path妯″潡锛歕nos.path.isfile(path) ----- 妫€楠岀粰鍑虹殑璺緞鏄惁鏄竴涓枃浠讹紝杩斿洖bool鍊糪nos.path.isdir(path) ----- 妫€楠岀粰鍑虹殑璺緞鏄惁鏄竴涓洰褰曪紝杩斿洖bool鍊糪nos.path.exists(path) ----- 妫€楠岀粰鍑虹殑璺緞鏄惁瀛樺湪锛岃繑鍥瀊ool鍊糪nos.path.getsize(path) ----- 鑾峰緱璺緞锛堟枃浠舵垨鐩綍锛夌殑澶у皬锛屽鏋滄槸鐩綍锛岃繑鍥?L锛屼互瀛楄妭涓哄崟浣峔nos.path.abspath(path) ----- 鑾峰緱缁濆璺緞\nos.path.normpath(path) ----- 瑙勮寖path瀛楃涓插舰寮忥紝缁撴灉鎶?鍙樹负//\nos.path.split(path) ----- 鍒嗗壊璺緞鍚嶅拰鏂囦欢鍚嶏紝杩斿洖鍊间负tuple锛?璺緞鍚嶏紝鏂囦欢鍚?鏂囦欢鎵╁睍鍚?锛屽鏋滆矾寰勬槸鐩綍锛屽垯杩斿洖锛?璺緞鍚嶏紝\'\')\nos.path.splitext(path) ----- 鍒嗙鏂囦欢鍚嶅拰鎵╁睍鍚嶏紝杩斿洖鍊兼牸寮忥細(鏂囦欢鍚嶏紝鎵╁睍鍚?锛屽鏋滃弬鏁版槸鐩綍锛屽垯杩斿洖锛?璺緞锛孿'\')\nos.path.join(path锛宯ame) ----- 杩炴帴鐩綍涓庢枃浠跺悕鎴栫洰褰曪紝杩斿洖鍊间负锛歱ath/name\nos.path.basename(path) ----- 杩斿洖鏂囦欢鍚嶏紝瀹為檯涓婃妸璺緞鐨勬渶鍚庝竴涓猏"/\"鍒嗗壊锛岃繑鍥炲悗鑰咃紝鐩綍浜﹀姝nos.path.dirname(path) ----- 杩斿洖鏂囦欢璺緞锛屽疄闄呬笂鏄妸璺緞鐨勬渶鍚庝竴涓猏"/\"鍒嗗壊锛岃繑鍥炲墠鑰咃紝鐩綍浜﹀姝nos.path.getatime(path) ----- 鏂囦欢鎴栨枃浠跺す鐨勬渶鍚庤闂椂闂达紝浠庢柊绾厓鍒拌闂椂鐨勭鏁癨nos.path.getmtime(path) ----- 鏂囦欢鎴栨枃浠跺す鐨勬渶鍚庝慨鏀规椂闂碶nos.path.getctime(path) ----- 鏂囦欢鎴栨枃浠跺す鐨勫垱寤烘椂闂?,1524418722.9793),('001524453864288c83965dde56e44c2915593889e93dbcd000','001524218866820200e190be1194e49b2f5b1ecf075d4d0000','h','http://www.gravatar.com/avatar/016504b84cee81b8f879075f5a14d281?d=mm&s=120','foice delete file','centos','rm -rf [file]',1524453864.28894),('0015244571246444810b7ec9c3047979007fe0259893aa9000','001524218866820200e190be1194e49b2f5b1ecf075d4d0000','h','http://www.gravatar.com/avatar/016504b84cee81b8f879075f5a14d281?d=mm&s=120','tar output file','centos','tar -zxvf test.tar.gz',1524457124.64431),('001524461589320bc002cfcf9ec454a957059936e68ac2a000','001524218866820200e190be1194e49b2f5b1ecf075d4d0000','h','http://www.gravatar.com/avatar/016504b84cee81b8f879075f5a14d281?d=mm&s=120','tar see file content','centos','tar -tf test.tar.gz',1524461589.32014);
/*!40000 ALTER TABLE `blogs` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `comments`
--

DROP TABLE IF EXISTS `comments`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `comments` (
  `id` varchar(50) NOT NULL,
  `blog_id` varchar(50) NOT NULL,
  `user_id` varchar(50) NOT NULL,
  `user_name` varchar(50) NOT NULL,
  `user_image` varchar(500) NOT NULL,
  `content` mediumtext NOT NULL,
  `created_at` double NOT NULL,
  PRIMARY KEY (`id`),
  KEY `idx_created_at` (`created_at`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `comments`
--

LOCK TABLES `comments` WRITE;
/*!40000 ALTER TABLE `comments` DISABLE KEYS */;
/*!40000 ALTER TABLE `comments` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `users`
--

DROP TABLE IF EXISTS `users`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `users` (
  `id` varchar(50) NOT NULL,
  `email` varchar(50) NOT NULL,
  `passwd` varchar(50) NOT NULL,
  `admin` tinyint(1) NOT NULL,
  `name` varchar(50) NOT NULL,
  `image` varchar(500) NOT NULL,
  `created_at` double NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `idx_email` (`email`),
  KEY `idx_created_at` (`created_at`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `users`
--

LOCK TABLES `users` WRITE;
/*!40000 ALTER TABLE `users` DISABLE KEYS */;
INSERT INTO `users` VALUES ('001524218866820200e190be1194e49b2f5b1ecf075d4d0000','wenmaohuang@126.com','554058af8449e981f141a94db9350552f4760451',1,'h','http://www.gravatar.com/avatar/016504b84cee81b8f879075f5a14d281?d=mm&s=120',1524218866.82106);
/*!40000 ALTER TABLE `users` ENABLE KEYS */;
UNLOCK TABLES;
/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

-- Dump completed on 2018-05-07  0:11:00
